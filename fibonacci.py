# fibonacci.py
# 피보나치 수열
"""
다이나믹 프로그래밍 (한 번 계산한 문제는 다시 계산하지 않도록 하는 알고리즘)
1. 큰 문제를 작은 문제로 나눌 수 있을 때,
2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일할 때 사용

탑다운, 바텀업 방식으로 구분
탑다운 방식을 구현하는 방법 중 하나는 메모이제이션(이진에 계산된 결과를 일시적으로 기록해 놓는 방법)
바텀업 방식은 DP테이블이라 불리는 결과 저장용 리스트를 사용
둘 다 리스트를 사용하여 결과를 기록해 놓지만 부르는 이름이 다름.
"""

# 재귀함수로 구현
def fibonacci(n):
    if n == 1 or n == 2:
        return 1
    return fibonacci(n-2) + fibonacci(n-1)

print(fibonacci(4))

# Top-Down 방식
# 메모이제이션(Memoization) 사용
# 한 번 계산된 결과를 메모이제이션하기 위한 리스트 초기화
d = [0] * 100

# 피보나치 함수를 재귀함수로 구현(탑다운 다이나믹 프로그래밍)
def fibo(x):
    # 종료 조건(1 또는 2일 때 1을 반환)
    if x == 1 or x == 2:
        return 1
    # 이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    d[x] = fibo(x-1) + fibo(x-2)
    return d[x]

print(fibo(99))

# Bottom-Up 방식
# 반복문을 사용하여 구현
# DP 테이블
b = [0] * 100
b[1] = 1
b[2] = 1
n = 99

for i in range(3, n+1):
    b[i] = b[i-1] + b[i-2]

print(b[n])